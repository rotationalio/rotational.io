<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Microservices on Rotational Labs</title><link>https://rotational.io/tags/microservices/</link><description>Recent content in Microservices on Rotational Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 21 Jan 2023 11:13:46 -0500</lastBuildDate><atom:link href="https://rotational.io/tags/microservices/index.xml" rel="self" type="application/rss+xml"/><item><title>Prototyping Event-Driven Applications With Watermill</title><link>https://rotational.io/blog/prototyping-eda-with-watermill/</link><pubDate>Sat, 21 Jan 2023 11:13:46 -0500</pubDate><guid>https://rotational.io/blog/prototyping-eda-with-watermill/</guid><description>&lt;p>Event-driven architectures (EDA) are &lt;a href="https://rotational.io/blog/five-technologies-quietly-transforming-the-web/">enjoying a resurgence in interest&lt;/a> due to many organizations&amp;rsquo; need to accelerate rapid prototyping and get by with smaller, more cross-functional teams. In this post, we&amp;rsquo;ll demonstrate how to get started prototyping EDAs with the open source package Watermill.&lt;/p></description></item><item><title>The Eventing Platform Landscape</title><link>https://rotational.io/blog/eventing-platforms/</link><pubDate>Sat, 10 Sep 2022 12:28:08 -0400</pubDate><guid>https://rotational.io/blog/eventing-platforms/</guid><description>&lt;p>Kafka and PubSub and Kinesis, oh my! Which eventing platform is best? In this post we&amp;rsquo;ll explore the three primary categories of eventing systems and understand their similarities, differences, and key use cases.&lt;/p></description></item><item><title>Five Technologies Quietly Transforming the Web</title><link>https://rotational.io/blog/five-technologies-quietly-transforming-the-web/</link><pubDate>Mon, 27 Jun 2022 13:00:01 -0400</pubDate><guid>https://rotational.io/blog/five-technologies-quietly-transforming-the-web/</guid><description>&lt;p>With almost 30 billion connected devices, this isn’t Al Gore’s internet anymore.
Consider this: According to &lt;a href="https://www.cisco.com/c/en/us/solutions/collateral/executive-perspectives/annual-internet-report/white-paper-c11-741490.html">Cisco’s Annual Internet Report&lt;/a>, there will be 29.3 billion internet-connected devices in 2023, or more than three for every human. The internet has no doubt transformed society and industry, while proving to be resilient and scalable. It also continues to evolve.&lt;/p></description></item><item><title>Contexts in Go Microservice Chains</title><link>https://rotational.io/blog/contexts-in-go-microservice-chains/</link><pubDate>Sun, 02 May 2021 14:24:33 -0400</pubDate><guid>https://rotational.io/blog/contexts-in-go-microservice-chains/</guid><description>&lt;p>Contexts are a critical part of services implemented in Golang. Although we see them often in server interfaces, they can be mysterious to developers implementing request handlers. In this post, we&amp;rsquo;ll discuss what contexts are and take a look at a specific example where contexts shine: services that are implemented as a series of microservice requests. Then we&amp;rsquo;ll dive into the tl;dr of contexts — namely, the two crucial rules that all service handlers should implement. Finally, we&amp;rsquo;ll demonstrate a quick experiment using gRPC to show how context deadlines are propagated to downstream microservices during request processing, enabling effective coordination.&lt;/p></description></item></channel></rss>