<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mocks on Rotational Labs</title><link>https://rotational.io/tags/mocks/</link><description>Recent content in Mocks on Rotational Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 08 Jul 2022 09:32:01 -0400</lastBuildDate><atom:link href="https://rotational.io/tags/mocks/index.xml" rel="self" type="application/rss+xml"/><item><title>Transparently Mocking gRPC Services</title><link>https://rotational.io/blog/transparently-mocking-grpc-services/</link><pubDate>Fri, 08 Jul 2022 09:32:01 -0400</pubDate><guid>https://rotational.io/blog/transparently-mocking-grpc-services/</guid><description>&lt;p>gRPC is an effective way of implementing service-to-service APIs. However, there are limited tools available for mocking and testing gRPC services out of the box. One option is to set up a live test server, although this comes with its own challenges and costs. In this blog post we will demonstrate a more lightweight solution using the &lt;code>bufconn&lt;/code> package and a hand-built mock. Don&amp;rsquo;t worry, this is easier than it seems!&lt;/p></description></item><item><title>Fake It When You Make It: Creating Mocks in Go</title><link>https://rotational.io/blog/fake-it-when-you-make-it/</link><pubDate>Mon, 06 Dec 2021 10:39:45 -0600</pubDate><guid>https://rotational.io/blog/fake-it-when-you-make-it/</guid><description>&lt;p>In the age of microservices and containerized applications, software is less monolithic and more interdependent. How do we write tests which account for this new reality? One common strategy is to create mocks for services. In this post, we&amp;rsquo;ll explore some of the challenges with testing in Go and dive into some concrete examples where creating mocks can help alleviate these problems.&lt;/p></description></item></channel></rss>