<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GRPC on Rotational Labs</title><link>https://rotational.io/tags/grpc/</link><description>Recent content in GRPC on Rotational Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 28 Mar 2023 13:29:11 -0400</lastBuildDate><atom:link href="https://rotational.io/tags/grpc/index.xml" rel="self" type="application/rss+xml"/><item><title>Mocking the Universe: Two Techniques for Testing gRPC with Mocks</title><link>https://rotational.io/blog/mocking-the-universe/</link><pubDate>Tue, 28 Mar 2023 13:29:11 -0400</pubDate><guid>https://rotational.io/blog/mocking-the-universe/</guid><description>&lt;p>At Rotational, &lt;a href="https://rotational.io/blog/what-are-protocol-buffers/">we use gRPC&lt;/a> &lt;a href="https://rotational.io/blog/documenting-grpc-with-openapi">quite a bit&lt;/a>. It&amp;rsquo;s great for specifying network APIs, but can challenge us to find new ways to thoroughly test the code. Follow along with this post to learn two ways of using &lt;a href="https://rotational.io/blog/fake-it-when-you-make-it/">mocking&lt;/a> to test gRPC services!&lt;/p></description></item><item><title>Transparently Mocking gRPC Services</title><link>https://rotational.io/blog/transparently-mocking-grpc-services/</link><pubDate>Fri, 08 Jul 2022 09:32:01 -0400</pubDate><guid>https://rotational.io/blog/transparently-mocking-grpc-services/</guid><description>&lt;p>gRPC is an effective way of implementing service-to-service APIs. However, there are limited tools available for mocking and testing gRPC services out of the box. One option is to set up a live test server, although this comes with its own challenges and costs. In this blog post we will demonstrate a more lightweight solution using the &lt;code>bufconn&lt;/code> package and a hand-built mock. Don&amp;rsquo;t worry, this is easier than it seems!&lt;/p></description></item><item><title>Five Technologies Quietly Transforming the Web</title><link>https://rotational.io/blog/five-technologies-quietly-transforming-the-web/</link><pubDate>Mon, 27 Jun 2022 13:00:01 -0400</pubDate><guid>https://rotational.io/blog/five-technologies-quietly-transforming-the-web/</guid><description>&lt;p>With almost 30 billion connected devices, this isn’t Al Gore’s internet anymore.
Consider this: According to &lt;a href="https://www.cisco.com/c/en/us/solutions/collateral/executive-perspectives/annual-internet-report/white-paper-c11-741490.html">Cisco’s Annual Internet Report&lt;/a>, there will be 29.3 billion internet-connected devices in 2023, or more than three for every human. The internet has no doubt transformed society and industry, while proving to be resilient and scalable. It also continues to evolve.&lt;/p></description></item><item><title>What Are Protocol Buffers?</title><link>https://rotational.io/blog/what-are-protocol-buffers/</link><pubDate>Wed, 19 May 2021 11:05:32 -0400</pubDate><guid>https://rotational.io/blog/what-are-protocol-buffers/</guid><description>&lt;p>Protocol buffers are a method for serializing data to efficiently send between programs. The structure is reminiscent of XML or JSON, but unlike these more commonly used text-based serialization methods, protocol buffers are designed to produce extremely compact messages using a binary format. The main tradeoff is that protocol buffers aren&amp;rsquo;t human-readable, so when developing APIs, it&amp;rsquo;s always important to consider the use case. In this post, we&amp;rsquo;ll explore some of the use cases for protobufs and get to know the syntax.&lt;/p></description></item><item><title>Documenting a gRPC API with OpenAPI</title><link>https://rotational.io/blog/documenting-grpc-with-openapi/</link><pubDate>Fri, 12 Feb 2021 17:45:35 +0000</pubDate><guid>https://rotational.io/blog/documenting-grpc-with-openapi/</guid><description>&lt;p>gRPC makes the specification and implementation of networked APIs a snap. But what is the simplest way to &lt;em>document&lt;/em> a gRPC API? There seem to be some hosted providers by Google, e.g. &lt;a href="https://cloud.google.com/endpoints/docs/grpc/dev-portal-update-ref-docs">SmartDocs&lt;/a>, but I have yet to find a gRPC-specific tool. For REST API frameworks, documentation is commonly generated along with live examples using &lt;a href="https://swagger.io/resources/open-api/">OpenAPI (formerly swagger)&lt;/a>. By using &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway&lt;/a> it appears to be pretty straight forward to generate a REST/gRPC API combo from protocol buffers and then hook into the OpenAPI specification.&lt;/p></description></item></channel></rss>