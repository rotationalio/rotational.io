[
    {
        "uri": "/dc-metro",
        "content": "---\ntitle: \"DC Metro\"\nslug: \"dc-metro\"\nsubtitle: \"Public Transport Data\" \ndraft: false\nimage: img/data-playground/dc-metro.png\nsummary: Connect to DC Metro public transport data and start experimenting with scheduling models and apps.\ngithub_link: https://github.com/rotationalio/data-playground/tree/main/wmata\ndescription: DC WMATA provides public transportation data such as real-time bus and rail predictions. \nproducer_name: DC WMATA\nproducer_link: https://developer.wmata.com/docs/services/gtfs/operations/bus-gtfs-static\ndata: Bus & train trip updates, alerts, and vehicle positions.\nisaccountrequired: false\nlicense: Free\nlicense_warning: Please review terms and conditions. Access to data sources can change.\nisapikey_required: true\napi_type: GTFS protocol buffers\nsdks: N/A\nlimits: None\nweight: 5\n---\n{{% data-playground-wrapper %}}\n\n{{% data-playground-code-tabs %}}\n{{% data-playground-code-tab tabIndex=\"python\" name=\"Python\"  %}}\n\ndef example(name):\n      print(f\"example, {name}!\")\n\n{{% /data-playground-code-tab %}}\n\n{{% data-playground-code-tab tabIndex=\"go\" name=\"Go\"  %}}\n\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"hello world\")\n}\n\n{{% /data-playground-code-tab %}}\n{{% /data-playground-code-tabs %}}\n\n{{% /data-playground-wrapper %}}\n\n{{% data-playground-content %}}\n\n!-- Add content for data playground here, including a table for data products if available --\n\n{{% /data-playground-content %}}\n",
        "tags": []
    },
    {
        "uri": "/finnhub",
        "content": "---\ntitle: \"Finnhub\"\nslug: \"finnhub\"\nsubtitle: \"Stock Market Data\"\ndraft: false\nimage: img/data-playground/finnhub.png\ngithub_link: https://github.com/rotationalio/data-playground/tree/main/finnhub\ndescription: FinnHub provides real-time stock market data. Note that the stock market is closed during certain times of days and days of the week.\nsummary: Finnhub provides real-time RESTful APIs and WebSocket for stocks, currencies, and crypto.\nlicense: Free, Commercial\nlicense_warning: Please review terms and conditions. Access to data sources can change.\nproducer_name: FinnHub\nproducer_link: https://finnhub.io/\nisapikey_required: true\napi_type: REST, WebSocket\nsdks: Python, Go\nlimits: \"60 API calls/minute for the free tier. Other pricing plans available.\"\ndata: Stock prices, company profiles, company & market news\nisaccountrequired: true\nweight: 1\n---\n\n{{% data-playground-wrapper %}}\n\n{{% data-playground-code-tabs %}}\n\n{{% data-playground-code-tab tabIndex=\"python\" name=\"Python\"  %}}\n<<<<<<< HEAD\nimport os\nimport sys\nimport json\nimport asyncio\nfrom datetime import datetime\n\ndef example(name):\n      print(f\"example, {name}!\")\n origin\n\nimport websockets\nfrom pyensign.events import Event\nfrom pyensign.ensign import Ensign\n\nasync def handle_ack(ack):\n    ts = datetime.fromtimestamp(ack.committed.seconds + ack.committed.nanos / 1e9)\n    print(f\"Event committed at {ts}\")\n\nasync def handle_nack(nack):\n    print(f\"Could not commit event {nack.id} with error {nack.code}: {nack.error}\")\n\nclass TradesPublisher:\n    \"\"\"\n    TradesPublisher queries an API for trading updates and publishes events to Ensign.\n    \"\"\"\n    def init(self, symbols=[\"AAPL\", \"MSFT\", \"AMZN\"], topic=\"trades\"):\n        self.symbols = symbols\n        self.topic = topic\n        self.ensign = Ensign()\n\n    def run(self):\n        \"\"\"\n        Run the publisher forever.\n        \"\"\"\n\n        # Load finnhub API key from environment variable.\n        token = os.environ.get(\"FINNHUBAPIKEY\")\n        if token is None:\n            raise ValueError(\"FINNHUBAPIKEY environment variable not set.\")\n\n        # Run the publisher.\n        asyncio.geteventloop().rununtilcomplete(self.recvandpublish(f\"wss://ws.finnhub.io?token={token}\"))\n\n    async def recvandpublish(self, uri):\n        \"\"\"\n        Receive messages from the websocket and publish events to Ensign.\n        \"\"\"\n\n        # Ensure that the Ensign topic exists before publishing.\n        if not await self.ensign.topic_exists(self.topic):\n            await self.ensign.create_topic(self.topic)\n\n        while True:\n            try:\n                async with websockets.connect(uri) as websocket:\n                    for symbol in self.symbols:\n                        await websocket.send(f'{{\"type\":\"subscribe\",\"symbol\":\"{symbol}\"}}')\n\n                    while True:\n                        message = await websocket.recv()\n                        for event in self.messagetoevents(json.loads(message)):\n                            await self.ensign.publish(self.topic, event, ackcallback=handleack, nackcallback=handlenack)\n            except websockets.exceptions.ConnectionClosedError as e:\n                # TODO: Make sure reconnect is happening for dropped connections.\n                print(f\"Websocket connection closed: {e}\")\n                await asyncio.sleep(1)\n\n    def messagetoevents(self, message):\n        \"\"\"\n        Convert a message from the Finnhub API to multiple Ensign events.\n        \"\"\"\n\n        message_type = message[\"type\"]\n        if message_type == \"ping\":\n            return\n        elif message_type == \"trade\":\n            for trade in message[\"data\"]:\n                data = {\n                    \"price\": trade[\"p\"],\n                    \"symbol\": trade[\"s\"],\n                    \"timestamp\": trade[\"t\"],\n                    \"volume\": trade[\"v\"]\n                }\n                yield Event(json.dumps(data).encode(\"utf-8\"), mimetype=\"application/json\")\n        else:\n            raise ValueError(f\"Unknown message type: {message_type}\")\n{{% /data-playground-code-tab %}}\n\n{{% data-playground-code-tab tabIndex=\"go\" name=\"Go\"  %}}\n\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\tensign \"github.com/rotationalio/go-ensign\"\n\tapi \"github.com/rotationalio/go-ensign/api/v1beta1\"\n\tmimetype \"github.com/rotationalio/go-ensign/mimetype/v1beta1\"\n)\n\n// This is the nickname of the topic, it will get mapped to an ID that actually gets used by Ensign\nconst Trades = \"trades\"\n\n// This represents the structure of an individual stock data point that comes back from the Finnhub API\ntype Data struct {\n\tSymbol     string   json:\"s\"\n\tPrice      float64  json:\"p\"\n\tTimestamp  uint64   json:\"t\"\n\tConditions []string json:\"c\" omitempty:\"true\"\n}\n\n// This represents the entire websocket response that comes back from a single call to the Finnhub Server\n// Note that a single Response may contain many Data points\ntype Response struct {\n\tType string json:\"type\"\n\tData []Data json:\"data\"\n}\n\n// Announce is a helper function that takes as input a event chan that gets created by calling sub.Subscribe()\n// and ranges over any events that it receives on the chan, unmarshals them, and prints them out\nfunc Announce(events <-chan *ensign.Event) {\n\tfor tick := range events {\n\t\ttrades := &Response{}\n\t\tif err := json.Unmarshal(tick.Data, &trades); err != nil {\n\t\t\tpanic(\"unable to unmarshal event: \" + err.Error())\n\t\t}\n\t\tfmt.Println(trades)\n\t}\n}\n\nfunc main() {\n\n\t// Create Ensign Client\n\tclient, err := ensign.New() // if your credentials are already in your bash profile, you don't have to pass anything into New()\n\t// client, err := ensign.New(ensign.WithCredentials(\"YOUR CLIENT ID HERE!\", \"YOUR CLIENT SECRET HERE!\"))\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"could not create client: %s\", err))\n\t}\n\n\t// Check to see if topic exists, if it does then the variable exists will be True\n\texists, err := client.TopicExists(context.Background(), Trades)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"unable to check topic existence: %s\", err))\n\t}\n\n\tvar topicID string\n\t// If the topic does not exist, create it using the CreateTopic method\n\tif !exists {\n\t\tif topicID, err = client.CreateTopic(context.Background(), Trades); err != nil {\n\t\t\tpanic(fmt.Errorf(\"unable to create topic: %s\", err))\n\t\t}\n\t} else {\n\t\t// The topic does exist, but we need to figure out what the Topic ID is, so we need\n\t\t// to query the ListTopics method to get back a list of all the topic nickname : topicID mappings\n\t\tif topicID, err = client.TopicID(context.Background(), Trades); err != nil {\n\t\t\tpanic(fmt.Errorf(\"unable to get id for topic: %s\", err))\n\t\t}\n\n\t}\n\n\tkey := os.Getenv(\"FINNHUB_KEY\")\n\tif key == \"\" {\n\t\tpanic(\"Finnhub key is required: get one at https://finnhub.io/\")\n\t}\n\n\t// Get trades from Finnhub - FYI this Dialer dials the \"Trades\" endpoint\n\t// see https://finnhub.io/docs/api/websocket-trades for more details\n\tfinnhub_url := fmt.Sprint(\"wss://ws.finnhub.io?token=\", key)\n\tw, , err := websocket.DefaultDialer.Dial(finnhuburl, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer w.Close()\n\n\t// The complete list of options is long! This is a short list, but no guarantee that all will be updated for every tick\n\tsymbols := []string{\"AAPL\", \"AMZN\", \"PCG\", \"SNAP\"}\n\tfor _, s := range symbols {\n\t\tmsg, _ := json.Marshal(map[string]interface{}{\"type\": \"subscribe\", \"symbol\": s})\n\t\tw.WriteMessage(websocket.TextMessage, msg)\n\t}\n\n\t// Create a subscriber  - the same subscriber should be consuming each event that comes down the pipe\n\tsub, err := client.Subscribe(topicID)\n\tif err != nil {\n\t\tfmt.Printf(\"could not create subscriber: %s\", err)\n\t}\n\n\t// Loop over each response that is returned by the Finnhub websocket, publish it to the topicID, have the subscriber consume to the events channel\n\tfor {\n\t\t// The Response struct is how we will boost the standard json marshalling library to know how to unpack and repackage Finnhub ticks\n\t\tmsg := &Response{}\n\t\terr := w.ReadJSON(&msg)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfmt.Println(\"Message from the websocket server is \", msg)\n\n\t\te := &ensign.Event{\n\t\t\tMimetype: mimetype.ApplicationJSON,\n\t\t\tType: &api.Type{\n\t\t\t\tName:         \"Generic\",\n\t\t\t\tMajorVersion: 1,\n\t\t\t\tMinorVersion: 0,\n\t\t\t\tPatchVersion: 0,\n\t\t\t},\n\t\t}\n\n\t\tif e.Data, err = json.Marshal(msg); err != nil {\n\t\t\tpanic(\"could not marshal data to JSON: \" + err.Error())\n\t\t}\n\n\t\t// Publish the newly received tick event to the Topic\n\t\tfmt.Printf(\"Publishing to topic id: %s\\n\", topicID)\n\t\ttime.Sleep(1 * time.Second)\n\t\tclient.Publish(topicID, e)\n\n\t\t// Goroutine to check the events channel to ensure that subscriber is getting all the ticks!\n\t\ttime.Sleep(1 * time.Second)\n\t\tgo Announce(sub.C)\n\t}\n}\n{{% /data-playground-code-tab %}}\n\n{{% /data-playground-code-tabs %}}\n\n{{% /data-playground-wrapper %}}\n\n{{% data-playground-content %}}\n\n!-- Add content for data playground here, including a table for data products if available --\n\n{{% /data-playground-content %}}\n",
        "tags": []
    },
    {
        "uri": "/noaa",
        "content": "---\ntitle: \"Noaa\"\nslug: \"noaa\"\nsubtitle: \"Weather Data\" \ndraft: false\nimage: img/data-playground/noaa.png\ngithub_link: \"https://github.com/rotationalio/data-playground/tree/main/weather\"\ndescription: The National Oceanic and Atmospheric Administration's (NOAA's) National Weather Service offers critical real-time data. Get forecasts, alerts, observations, and other weather data.\nsummary: The National Weather Service (NWS) API allows access to critical forecasts, alerts, and observations, along with other weather data.\nlicense: Free\nlicense_warning: Please review terms and conditions. Access to data sources can change.\nproducer_name: NOAA\nproducer_link: https://api.weather.gov\nisapikey_required: false\napi_type: REST, JSON-LD, GeoJSON, OXML\nsdks: N/A\nlimits: The rate limit is not public information, but allows a generous amount for typical use. If the rate limit is exceeded, the request will return with an error, and may be retried after the limit clears (typically within 5 seconds). Proxies are more likely to reach the limit, whereas requests directly from clients are not likely.\ndata: Stock prices, company profiles, company & market news\nisaccountrequired: false\nweight: 2\n---\n\nAdd data products showcase \n\n",
        "tags": []
    },
    {
        "uri": "/opensky",
        "content": "---\ntitle: \"Opensky\"\nslug: \"opensky\"\nsubtitle: \"Flight Data\" \ndraft: false\nimage: img/data-playground/opensky.png\ngithub_link: https://github.com/rotationalio/data-playground/tree/main/opensky\ndescription: OpenSky provides flight data by aircraft along with arrivals and departures by airport. \nsummary: Connect to flight data and start experimenting with aviation models and apps.\nlicense: Free\nproducer_name: OpenSky\nproducer_link: https://openskynetwork.github.io/opensky-api/\nisapikey_required: false\napi_type: REST\nsdks: Python API, Java API\nlimits: 400 API credits per day and 4,000 API credits per day for OpenSky users\ndata: Flight data, arrivals, departures, aircraft trajectory\nisaccountrequired: false\nweight: 6\n---\n\n{{% data-playground-wrapper %}}\n\n{{% data-playground-code-tabs %}}\n{{% data-playground-code-tab tabIndex=\"python\" name=\"Python\"  %}}\n\ndef example(name):\n      print(f\"example, {name}!\")\n\n{{% /data-playground-code-tab %}}\n\n{{% data-playground-code-tab tabIndex=\"go\" name=\"Go\"  %}}\n\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"hello world\")\n}\n\n{{% /data-playground-code-tab %}}\n{{% /data-playground-code-tabs %}}\n\n{{% /data-playground-wrapper %}}\n\n{{% data-playground-content %}}\n\n!-- Add content for data playground here, including a table for data products if available --\n\n{{% /data-playground-content %}}\n\n",
        "tags": []
    },
    {
        "uri": "/steam",
        "content": "---\ntitle: \"Steam\"\nslug: \"steam\"\nsubtitle: \"Game Reviews\" \ndraft: false\nimage: img/data-playground/steam.png\ngithub_link: \"https://github.com/rotationalio/data-playground/tree/main/steam\"\ndescription: The Steam API allows users to fetch statistics for individual games, data about users, or news feeds for game updates. All of this can be brought to bear to create powerful analytics on top of video game data made seamless using Ensign.\nsummary: Connect to game review data and start experimenting with game review models and apps.\nlicense: Free\nlicense_warning: Please review terms and conditions. Access to data sources can change.\nproducer_name: Steam\nproducer_link: https://steam.io/\nisapikey_required: true\napi_type: REST\nsdks: N/A\nlimits: 100,000 API calls per day\ndata: Game data and player stats\nisaccountrequired: false\nweight: 3\n---\n\n{{% data-playground-wrapper %}}\n\n{{% data-playground-code-tabs %}}\n{{% data-playground-code-tab tabIndex=\"python\" name=\"Python\"  %}}\n\ndef example(name):\n      print(f\"example, {name}!\")\n\n{{% /data-playground-code-tab %}}\n\n{{% data-playground-code-tab tabIndex=\"go\" name=\"Go\"  %}}\n\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n)\n\ntype SteamApps struct {\n\tAppList struct {\n\t\tApps []SteamApp\n\t}\n}\n\ntype SteamApp struct {\n\tAppId uint64\n\tName  string\n}\n\ntype AppReviews struct {\n\tSuccess      int\n\tQuerySummary QuerySummary\n\tReviews      []Review\n}\n\ntype QuerySummary struct {\n\tNumberReviews          int\n\tReviewScore            int\n\tReviewScoreDescription string\n\tTotalPositive          int\n\tTotalNegative          int\n\tTotalReviews           int\n}\n\ntype Review struct {\n\tID                string\n\tAuthor            Author\n\tLanguage          string\n\tReview            string\n\tTimeCreated       int64\n\tTimeUpdated       int64\n\tVotedUp           bool\n\tVotesUp           int\n\tVotesDown         int\n\tVotesFunny        int\n\tWeightedVoteScore string\n\tCommentCount      json.RawMessage\n\tSteamPurchase     bool\n\tReceivedForFree   bool\n\tEarlyAccess       bool\n}\n\ntype Author struct {\n\tUserID               string\n\tNumberGamesOwned     int\n\tNumberReviews        int\n\tPlayTimeForever      int\n\tPlaytimeLastTwoWeeks int\n\tLastPlayed           int64\n}\n\nfunc main() {\n\tvar err error\n\tvar response *http.Response\n\tif response, err = http.Get(\"https://api.steampowered.com/ISteamApps/GetAppList/v2/\"); err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer response.Body.Close()\n\n\tvar apps SteamApps\n\tif response.StatusCode != 200 {\n\t\tfmt.Println(\"status code\", response.StatusCode)\n\t\treturn\n\t}\n\tjson.NewDecoder(response.Body).Decode(&apps)\n\n\tvar reviews AppReviews\n\turl := \"https://store.steampowered.com/appreviews/413150?json=1'\"\n\tif response, err = http.Get(url); err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tjson.NewDecoder(response.Body).Decode(&reviews)\n\n\tfmt.Println(len(reviews.Reviews))\n\tfmt.Println(reviews.Reviews[0].Review)\n}\n\n{{% /data-playground-code-tab %}}\n{{% /data-playground-code-tabs %}}\n\n{{% /data-playground-wrapper %}}\n\n{{% data-playground-content %}}\n\n!-- Add content for data playground here, including a table for data products if available --\n\n{{% /data-playground-content %}}\n",
        "tags": []
    },
    {
        "uri": "/us-geological",
        "content": "---\ntitle: \"US Geological\"\nslug: \"us-geological\"\nsubtitle: \"Earthquake Data\" \ndraft: false\nimage: img/data-playground/us-geological.png\ngithub_link: \"https://github.com/rotationalio/data-playground/tree/main/usgs\"\ndescription: US Geological provides information about earthquakes and their impact.\nsummary: Connect to earthquake data and start experimenting with geological models and apps.\nlicense: Free\nlicense_warning: Please review terms and conditions. Access to data sources can change.\nproducer_name: US Geological\nproducer_link: \"https://earthquake.usgs.gov/fdsnws/event/1/\"\nisapikey_required: false\napi_type: REST\nsdks: N/A\nlimits: None\ndata: Earthquake data\nisaccountrequired: false\nweight: 4\n---\n\n{{% data-playground-wrapper %}}\n\n{{% data-playground-code-tabs %}}\n{{% data-playground-code-tab tabIndex=\"python\" name=\"Python\"  %}}\n\ndef example(name):\n      print(f\"example, {name}!\")\n\n{{% /data-playground-code-tab %}}\n\n{{% data-playground-code-tab tabIndex=\"go\" name=\"Go\"  %}}\n\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"hello world\")\n}\n\n{{% /data-playground-code-tab %}}\n{{% /data-playground-code-tabs %}}\n\n{{% /data-playground-wrapper %}}\n\n{{% data-playground-content %}}\n\n!-- Add content for data playground here, including a table for data products if available --\n\n{{% /data-playground-content %}}\n",
        "tags": []
    }
]