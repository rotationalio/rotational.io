dim(listing_prep2_nonum)
names(listing_prep2_nonum)
listing_prep2_nonum %>%
gather(key, value, -!!targetVar) %>%
ggplot(aes(x = value, y = !!targetVar)) +
facet_wrap(~ key, scales = "free", ncol = 3) +
geom_boxplot()
training_prop <- 0.8
set.seed(1234)
listing_split <- listing_prep2 %>%
rename(target_var = targetVar) %>%
na.omit() %>%
initial_split(prop = training_prop, strata = target_var)
listing_train <- training(listing_split)
listing_test <- testing(listing_split)
listing_kfolds <- vfold_cv(listing_train, v = 5, strata = target_var)
glimpse(listing_train)
glimpse(listing_test)
glimpse(listing_kfolds)
train_num <- listing_train %>%
mutate(split = "training")
test_num <- listing_test %>%
mutate(split = "test")
trainTest_num <- rbind(train_num, test_num)
trainTest_num %>%
select(where(is.numeric) | split) %>%
gather(key, value, -split) %>%
ggplot(aes(x = value, fill = split)) +
facet_wrap(~ key, scales = "free", ncol = 4) +
geom_density(alpha=0.5)
logTransformVar <- c("price", "minimum_nights", "maximum_nights",
"number_of_reviews", "reviews_per_month",
"calculated_host_listings_count",
"host_listings_count", "host_total_listings_count",
"host_acceptance_rate", "host_response_rate", "accommodates",
"availability_30", "availability_60")
rcpTransform <- recipe(target_var ~ ., data = listing_train) %>%
# step_zv(all_predictors()) %>%
# step_nzv(all_predictors()) %>%
step_corr(all_numeric(), -all_outcomes(), threshold = 0.7,
method = "pearson") %>%
step_rm(neighbourhood_cleansed, starts_with("review"), -all_outcomes()) %>%
# step_rm(neighbourhood_cleansed) %>%
# step_log(all_outcomes(), skip = TRUE) %>%
# step_log(all_of(logTransformVar), offset = 0.1) %>%
# step_log(all_numeric(), -year_host, -all_outcomes(), offset = 0.1) %>%
# step_medianimpute(all_numeric(), -all_outcomes()) %>%
step_YeoJohnson(all_numeric(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
# step_normalize(all_numeric(), -all_outcomes(), na_rm = TRUE) %>%
# step_knnimpute(all_nominal()) %>%
step_dummy(all_nominal(), -all_outcomes())
rcpTransform
#see the transformed data
listingTrain_T <- rcpTransform %>% prep() %>% bake(listing_train)
listingTrain_T %>%
gather() %>%
ggplot(aes(x = value)) +
facet_wrap(~ key, scales = "free", ncol = 4) +
geom_bar()
intersect_vars <- intersect(names(listing_train), names(listingTrain_T))
train_proc <- listing_train %>%
select(all_of(intersect_vars)) %>%
mutate(processed = "original")
train_T_proc <- listingTrain_T %>%
select(all_of(intersect_vars)) %>%
mutate(processed = "processed")
trainTProcessed <- rbind(train_proc, train_T_proc)
trainTProcessed %>%
select(where(is.numeric) | processed) %>%
gather(key, value, -processed)
# %>%
#   ggplot(aes(x = value, fill = processed)) +
#     facet_wrap(~ key, scales = "free", ncol = 4) +
#     geom_density(alpha=0.5)
# glimpse(listing_train)
# glimpse(listingTrain_T)
var_list <- sort(names(listing_prep))
var_list
var_list %>% remove('price')
var_list %>% remove("price")
type(var_list)
str(var_list)
"price" %in% var_list
match("price", var_list)
var_list[-match("price", var_list)]
var_list_num
var_list <- sort(names(listing_prep))
var_list_num <- listing_prep %>%
keep(is.numeric) %>%
names()
pickerInput(
inputId = "Itarget_var",
label = "Choose response variable:",
choices = c("price", "review_scores_rating"),
selected = "price"
)
library(party)
install.packages("party")
?as.formula
listing_prep
listing_prep <- read_csv("data/listing_prep.csv")
listing_prep <- listing_prep %>%
mutate_at(where(is.character), fn = as.factor) %>%
mutate_at(where(is.logical), fn = as.factor)
listing_prep <- read_csv("data/listing_prep.csv")
listing_prep <- listing_prep %>%
mutate(across(where(is.character)), fn = as.factor) %>%
mutate(across(where(is.logical)), fn = as.factor)
listing_prep <- read_csv("data/listing_prep.csv")
listing_prep <- listing_prep %>%
mutate(across(where(is.character)), ~as.factor) %>%
mutate(across(where(is.logical)), ~as.factor)
listing_prep <- read_csv("data/listing_prep.csv")
listing_prep <- listing_prep %>%
mutate(across(where(is.character)), as.factor) %>%
mutate(across(where(is.logical)), as.factor)
listing_prep <- read_csv("data/listing_prep.csv")
listing_prep <- listing_prep %>%
mutate(across(where(is_character)), as_factor) %>%
mutate(across(where(is_logical)), as_factor)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
packages = c('tidyverse', 'tidymodels', 'ggplot2', 'skimr', 'naniar', 'kableExtra',
'vip')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
listing_prep <- read_csv("data/listing_prep.csv")
packages = c('ggstatsplot', 'corrplot', 'Hmisc')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
names(listing_prep)
predVar <- names(listing_prep)
# predVar <- c("host_response_time", "host_response_rate" , "host_acceptance_rate",
#              "host_is_superhost", "host_listings_count", "host_total_listings_count",
#              "host_verifications", "host_identity_verified",
#              "neighbourhood_cleansed", "neighbourhood_group_cleansed", "latitude",
#              "longitude", "property_type", "room_type", "accommodates", "beds",
#              "price", "minimum_nights", "maximum_nights", "availability_30",
#              "availability_60", "number_of_reviews", "instant_bookable",
#              "calculated_host_listings_count", "reviews_per_month", "bathroom",
#              "year_host")
targetVar <- sym("review_scores_rating")
# predVar <- c("host_response_time", "host_response_rate" , "host_acceptance_rate",
#              "host_is_superhost", "host_listings_count", "host_total_listings_count",
#              "host_verifications", "host_identity_verified",
#              "neighbourhood_cleansed", "neighbourhood_group_cleansed", "latitude",
#              "longitude", "property_type", "room_type", "accommodates", "beds",
#              "review_scores_rating", "minimum_nights", "maximum_nights",
#              "availability_30", "availability_60", "number_of_reviews",
#              "instant_bookable", "calculated_host_listings_count",
#              "reviews_per_month", "bathroom", "year_host")
# targetVar <- sym("price")
listing_prep2 <- listing_prep %>%
select(c(predVar, targetVar)) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.factor))
skim_without_charts(listing_prep2)
# listing_prep2 <- listing_prep %>%
#   select(-review_scores_accuracy, -review_scores_cleanliness,
#          -review_scores_checkin, -review_scores_communication,
#          -review_scores_location, -review_scores_value)
listing_prep2_num <- listing_prep2 %>%
keep(is.numeric)
dim(listing_prep2_num)
names(listing_prep2_num)
numVar <- c("beds", "bathroom", "accommodates", "number_of_reviews",
"reviews_per_month", "price", "year_host", "latitude", "longitude",
"minimum_nights", "maximum_nights", "host_response_rate",
"host_listings_count", "host_total_listings_count", "availability_30",
"review_scores_rating")
listing_prep2_num %>%
# select(numVar) %>%
ggcorrmat()
corM <- listing_prep2_num %>%
# select(numVar) %>%
cor(use="pairwise.complete.obs")
corrplot(corM, type = "lower", method = "color", order = "hclust", diag = FALSE,
addCoef.col = "black", tl.cex = 0.9, number.cex = 0.9,
sig.level = 0.05, insig = "blank")
listing_prep2_num2 <- listing_prep2_num
# select(numVar)
corM <- rcorr(as.matrix(listing_prep2_num2))
M <- corM$r
p_mat <- corM$P
corrplot(M, type = "lower", method = "color", order = "hclust", diag = FALSE,
addCoef.col = "black", tl.cex = 0.9, number.cex = 0.9,
p.mat = p_mat, sig.level = 0.05)
listing_prep2_nonum <- listing_prep2 %>%
select(negate(is.numeric) | !!targetVar)
dim(listing_prep2_nonum)
names(listing_prep2_nonum)
listing_prep2_nonum %>%
gather(key, value, -!!targetVar) %>%
ggplot(aes(x = value, y = !!targetVar)) +
facet_wrap(~ key, scales = "free", ncol = 3) +
geom_boxplot()
training_prop <- 0.8
set.seed(1234)
listing_split <- listing_prep2 %>%
rename(target_var = targetVar) %>%
na.omit() %>%
initial_split(prop = training_prop, strata = target_var)
listing_train <- training(listing_split)
listing_test <- testing(listing_split)
listing_kfolds <- vfold_cv(listing_train, v = 5, strata = target_var)
glimpse(listing_train)
glimpse(listing_test)
glimpse(listing_kfolds)
train_num <- listing_train %>%
mutate(split = "training")
test_num <- listing_test %>%
mutate(split = "test")
trainTest_num <- rbind(train_num, test_num)
trainTest_num %>%
select(where(is.numeric) | split) %>%
gather(key, value, -split) %>%
ggplot(aes(x = value, fill = split)) +
facet_wrap(~ key, scales = "free", ncol = 4) +
geom_density(alpha=0.5)
f <- as.formula(paste(Rtarget_var(), "~ ."))
rf1 <- cforest(targetVar ~ ., data = listing_train,
control = cforest_unbiased(mtry=2, ntree=50))
?cforest
library(party)
rf1 <- cforest(targetVar ~ ., data = listing_train,
control = cforest_unbiased(mtry=2, ntree=50))
rf1 <- cforest(target_var ~ ., data = listing_train,
control = cforest_unbiased(mtry=2, ntree=50))
# get variable importance, based on mean decrease in accuracy.
# conditional=TRUE' adjusts for correlations between predictors
varimp(rf1, conditional = TRUE)
rf1 <- cforest(target_var ~ ., data = listing_train,
control = cforest_unbiased(mtry=2, ntree=10))
# get variable importance, based on mean decrease in accuracy.
# conditional=TRUE' adjusts for correlations between predictors
varimp(rf1, conditional = TRUE)
logTransformVar <- c("price", "minimum_nights", "maximum_nights",
"number_of_reviews", "reviews_per_month",
"calculated_host_listings_count",
"host_listings_count", "host_total_listings_count",
"host_acceptance_rate", "host_response_rate", "accommodates",
"availability_30", "availability_60")
rcpTransform <- recipe(target_var ~ ., data = listing_train) %>%
# step_zv(all_predictors()) %>%
# step_nzv(all_predictors()) %>%
step_corr(all_numeric(), -all_outcomes(), threshold = 0.7,
method = "pearson") %>%
step_rm(neighbourhood_cleansed, starts_with("review"), -all_outcomes()) %>%
# step_rm(neighbourhood_cleansed) %>%
# step_log(all_outcomes(), skip = TRUE) %>%
# step_log(all_of(logTransformVar), offset = 0.1) %>%
# step_log(all_numeric(), -year_host, -all_outcomes(), offset = 0.1) %>%
# step_medianimpute(all_numeric(), -all_outcomes()) %>%
step_YeoJohnson(all_numeric(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
# step_normalize(all_numeric(), -all_outcomes(), na_rm = TRUE) %>%
# step_knnimpute(all_nominal()) %>%
step_dummy(all_nominal(), -all_outcomes())
rcpTransform
#see the transformed data
listingTrain_T <- rcpTransform %>% prep() %>% bake(listing_train)
listingTrain_T %>%
gather() %>%
ggplot(aes(x = value)) +
facet_wrap(~ key, scales = "free", ncol = 4) +
geom_bar()
intersect_vars <- intersect(names(listing_train), names(listingTrain_T))
train_proc <- listing_train %>%
select(all_of(intersect_vars)) %>%
mutate(processed = "original")
train_T_proc <- listingTrain_T %>%
select(all_of(intersect_vars)) %>%
mutate(processed = "processed")
trainTProcessed <- rbind(train_proc, train_T_proc)
trainTProcessed %>%
select(where(is.numeric) | processed) %>%
gather(key, value, -processed) %>%
ggplot(aes(x = value, fill = processed)) +
facet_wrap(~ key, scales = "free", ncol = 4) +
geom_density(alpha=0.5)
# glimpse(listing_train)
# glimpse(listingTrain_T)
logTransformVar <- c("price", "minimum_nights", "maximum_nights",
"number_of_reviews", "reviews_per_month",
"calculated_host_listings_count",
"host_listings_count", "host_total_listings_count",
"host_acceptance_rate", "host_response_rate", "accommodates",
"availability_30", "availability_60")
rcpTransform <- recipe(target_var ~ ., data = listing_train) %>%
# step_zv(all_predictors()) %>%
# step_nzv(all_predictors()) %>%
step_corr(all_numeric(), -all_outcomes(), threshold = 0.7,
method = "pearson") %>%
step_rm(neighbourhood_cleansed, starts_with("review"), -all_outcomes()) %>%
# step_rm(neighbourhood_cleansed) %>%
# step_log(all_outcomes(), skip = TRUE) %>%
# step_log(all_of(logTransformVar), offset = 0.1) %>%
# step_log(all_numeric(), -year_host, -all_outcomes(), offset = 0.1) %>%
# step_medianimpute(all_numeric(), -all_outcomes()) %>%
step_YeoJohnson(all_numeric(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
# step_normalize(all_numeric(), -all_outcomes(), na_rm = TRUE) %>%
# step_knnimpute(all_nominal()) %>%
step_dummy(all_nominal(), -all_outcomes())
rcpTransform
#see the transformed data
listingTrain_T <- rcpTransform %>% prep() %>% bake(listing_train)
listingTrain_T %>%
gather() %>%
ggplot(aes(x = value)) +
facet_wrap(~ key, scales = "free", ncol = 4) +
geom_bar()
intersect_vars <- intersect(names(listing_train), names(listingTrain_T))
train_proc <- listing_train %>%
select(all_of(intersect_vars)) %>%
mutate(processed = "original")
train_T_proc <- listingTrain_T %>%
select(all_of(intersect_vars)) %>%
mutate(processed = "processed")
trainTProcessed <- rbind(train_proc, train_T_proc)
trainTProcessed %>%
select(where(is.numeric) | processed) %>%
gather(key, value, -processed) %>%
ggplot(aes(x = value, fill = processed)) +
facet_wrap(~ key, scales = "free", ncol = 4) +
geom_density(alpha=0.5)
# glimpse(listing_train)
# glimpse(listingTrain_T)
#Linear regression
lm_mod <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
listing_wflow <-
workflow() %>%
add_model(lm_mod) %>%
add_recipe(rcpTransform)
listing_fit <-
listing_wflow %>%
fit(data = listing_train)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
packages = c('tidyverse', 'tidymodels', 'ggplot2', 'skimr', 'naniar', 'kableExtra',
'vip')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
listing_prep <- read_csv("data/listing_prep.csv")
packages = c('ggstatsplot', 'corrplot', 'Hmisc')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
names(listing_prep)
predVar <- names(listing_prep)
# predVar <- c("host_response_time", "host_response_rate" , "host_acceptance_rate",
#              "host_is_superhost", "host_listings_count", "host_total_listings_count",
#              "host_verifications", "host_identity_verified",
#              "neighbourhood_cleansed", "neighbourhood_group_cleansed", "latitude",
#              "longitude", "property_type", "room_type", "accommodates", "beds",
#              "price", "minimum_nights", "maximum_nights", "availability_30",
#              "availability_60", "number_of_reviews", "instant_bookable",
#              "calculated_host_listings_count", "reviews_per_month", "bathroom",
#              "year_host")
targetVar <- sym("review_scores_rating")
# predVar <- c("host_response_time", "host_response_rate" , "host_acceptance_rate",
#              "host_is_superhost", "host_listings_count", "host_total_listings_count",
#              "host_verifications", "host_identity_verified",
#              "neighbourhood_cleansed", "neighbourhood_group_cleansed", "latitude",
#              "longitude", "property_type", "room_type", "accommodates", "beds",
#              "review_scores_rating", "minimum_nights", "maximum_nights",
#              "availability_30", "availability_60", "number_of_reviews",
#              "instant_bookable", "calculated_host_listings_count",
#              "reviews_per_month", "bathroom", "year_host")
# targetVar <- sym("price")
listing_prep2 <- listing_prep %>%
select(c(predVar, targetVar)) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.factor))
skim_without_charts(listing_prep2)
# listing_prep2 <- listing_prep %>%
#   select(-review_scores_accuracy, -review_scores_cleanliness,
#          -review_scores_checkin, -review_scores_communication,
#          -review_scores_location, -review_scores_value)
listing_prep2_num <- listing_prep2 %>%
keep(is.numeric)
dim(listing_prep2_num)
names(listing_prep2_num)
numVar <- c("beds", "bathroom", "accommodates", "number_of_reviews",
"reviews_per_month", "price", "year_host", "latitude", "longitude",
"minimum_nights", "maximum_nights", "host_response_rate",
"host_listings_count", "host_total_listings_count", "availability_30",
"review_scores_rating")
listing_prep2_num %>%
# select(numVar) %>%
ggcorrmat()
corM <- listing_prep2_num %>%
# select(numVar) %>%
cor(use="pairwise.complete.obs")
corrplot(corM, type = "lower", method = "color", order = "hclust", diag = FALSE,
addCoef.col = "black", tl.cex = 0.9, number.cex = 0.9,
sig.level = 0.05, insig = "blank")
listing_prep2_num2 <- listing_prep2_num
# select(numVar)
corM <- rcorr(as.matrix(listing_prep2_num2))
M <- corM$r
p_mat <- corM$P
corrplot(M, type = "lower", method = "color", order = "hclust", diag = FALSE,
addCoef.col = "black", tl.cex = 0.9, number.cex = 0.9,
p.mat = p_mat, sig.level = 0.05)
listing_prep2_nonum <- listing_prep2 %>%
select(negate(is.numeric) | !!targetVar)
dim(listing_prep2_nonum)
names(listing_prep2_nonum)
listing_prep2_nonum %>%
gather(key, value, -!!targetVar) %>%
ggplot(aes(x = value, y = !!targetVar)) +
facet_wrap(~ key, scales = "free", ncol = 3) +
geom_boxplot()
training_prop <- 0.8
set.seed(1234)
listing_split <- listing_prep2 %>%
rename(target_var = targetVar) %>%
na.omit() %>%
initial_split(prop = training_prop, strata = target_var)
listing_train <- training(listing_split)
listing_test <- testing(listing_split)
listing_kfolds <- vfold_cv(listing_train, v = 5, strata = target_var)
glimpse(listing_train)
glimpse(listing_test)
glimpse(listing_kfolds)
train_num <- listing_train %>%
mutate(split = "training")
test_num <- listing_test %>%
mutate(split = "test")
trainTest_num <- rbind(train_num, test_num)
trainTest_num %>%
select(where(is.numeric) | split) %>%
gather(key, value, -split) %>%
ggplot(aes(x = value, fill = split)) +
facet_wrap(~ key, scales = "free", ncol = 4) +
geom_density(alpha=0.5)
logTransformVar <- c("price", "minimum_nights", "maximum_nights",
"number_of_reviews", "reviews_per_month",
"calculated_host_listings_count",
"host_listings_count", "host_total_listings_count",
"host_acceptance_rate", "host_response_rate", "accommodates",
"availability_30", "availability_60")
rcpTransform <- recipe(target_var ~ ., data = listing_train) %>%
# step_zv(all_predictors()) %>%
# step_nzv(all_predictors()) %>%
step_corr(all_numeric(), -all_outcomes(), threshold = 0.7,
method = "pearson") %>%
step_rm(neighbourhood_cleansed, starts_with("review"), -all_outcomes()) %>%
# step_rm(neighbourhood_cleansed) %>%
# step_log(all_outcomes(), skip = TRUE) %>%
# step_log(all_of(logTransformVar), offset = 0.1) %>%
# step_log(all_numeric(), -year_host, -all_outcomes(), offset = 0.1) %>%
# step_medianimpute(all_numeric(), -all_outcomes()) %>%
step_YeoJohnson(all_numeric(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
# step_normalize(all_numeric(), -all_outcomes(), na_rm = TRUE) %>%
# step_knnimpute(all_nominal()) %>%
step_dummy(all_nominal(), -all_outcomes())
rcpTransform
#see the transformed data
listingTrain_T <- rcpTransform %>% prep() %>% bake(listing_train)
listingTrain_T %>%
gather() %>%
ggplot(aes(x = value)) +
facet_wrap(~ key, scales = "free", ncol = 4) +
geom_bar()
intersect_vars <- intersect(names(listing_train), names(listingTrain_T))
train_proc <- listing_train %>%
select(all_of(intersect_vars)) %>%
mutate(processed = "original")
train_T_proc <- listingTrain_T %>%
select(all_of(intersect_vars)) %>%
mutate(processed = "processed")
trainTProcessed <- rbind(train_proc, train_T_proc)
trainTProcessed %>%
select(where(is.numeric) | processed) %>%
gather(key, value, -processed) %>%
ggplot(aes(x = value, fill = processed)) +
facet_wrap(~ key, scales = "free", ncol = 4) +
geom_density(alpha=0.5)
# glimpse(listing_train)
# glimpse(listingTrain_T)
#Linear regression
lm_mod <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
listing_wflow <-
workflow() %>%
add_model(lm_mod) %>%
add_recipe(rcpTransform)
listing_fit <-
listing_wflow %>%
fit(data = listing_train)
