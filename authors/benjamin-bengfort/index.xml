<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Benjamin Bengfort, Ph.D. on Rotational Labs</title><link>https://rotational.io/authors/benjamin-bengfort/</link><description>Recent content in Benjamin Bengfort, Ph.D. on Rotational Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 Oct 2023 10:44:44 -0400</lastBuildDate><atom:link href="https://rotational.io/authors/benjamin-bengfort/index.xml" rel="self" type="application/rss+xml"/><item><title>Compression vs Cryptography: What Comes First?</title><link>https://rotational.io/blog/compression-vs-cryptography/</link><pubDate>Tue, 31 Oct 2023 10:44:44 -0400</pubDate><guid>https://rotational.io/blog/compression-vs-cryptography/</guid><description>&lt;p>Data encryption and compression are heavyweight algorithms that must be used with care in performance intensive applications; but when applying both mechanics to the same data, which should come first?&lt;/p></description></item><item><title>How to Dockerize Python Data Science Processes</title><link>https://rotational.io/blog/how-to-dockerize-data-science-processes/</link><pubDate>Thu, 14 Sep 2023 11:52:15 -0500</pubDate><guid>https://rotational.io/blog/how-to-dockerize-data-science-processes/</guid><description>&lt;p>Docker is great, but most tutorials are geared toward devOps users, not data scientists. If you&amp;rsquo;re building long-running processes for NLP, ML, or generative AI, here&amp;rsquo;s a blueprint for Python Docker containers for data science!&lt;/p></description></item><item><title>Speeding Up Go Tests</title><link>https://rotational.io/blog/speeding-up-go-tests/</link><pubDate>Sun, 30 Jul 2023 09:39:09 -0500</pubDate><guid>https://rotational.io/blog/speeding-up-go-tests/</guid><description>&lt;p>It can be frustrating as a developer to wait for a large test suite to run, particularly when you have to run the suite multiple times in development. In this post, we&amp;rsquo;ll explore parallel and short modes with Go tests in an effort to improve local test speed and save longer running tests for CI.&lt;/p></description></item><item><title>Double-Checked Locking</title><link>https://rotational.io/blog/double-checked-locking/</link><pubDate>Fri, 17 Mar 2023 12:31:07 -0500</pubDate><guid>https://rotational.io/blog/double-checked-locking/</guid><description>&lt;p>Double-checked locking is a common mechanism to avoid race conditions when using read and write locks. Unfortunately, as with nearly all things related to concurrency, it is easy to get wrong or forget.&lt;/p></description></item><item><title>October Retreats and Conferences</title><link>https://rotational.io/blog/october-retreats-and-conferences/</link><pubDate>Mon, 31 Oct 2022 13:32:04 -0500</pubDate><guid>https://rotational.io/blog/october-retreats-and-conferences/</guid><description>&lt;p>Even though we are a fully distributed team, we celebrate curiosity, collaboration, and growth together in-person as much as we can. We&amp;rsquo;ve maintained a tradition of combining tech conferences with team retreats, and this October we had our second 2022 retreat in Chicago, Illinois collocated with &lt;a href="https://www.gophercon.com/home">GopherCon 2022&lt;/a>. We also attended &lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/">KubeCon 2022&lt;/a> in Detroit at the end of the month.&lt;/p></description></item><item><title>Ranges of Integer Data Types</title><link>https://rotational.io/blog/ranges-of-integer-data-types/</link><pubDate>Wed, 07 Sep 2022 09:40:12 -0500</pubDate><guid>https://rotational.io/blog/ranges-of-integer-data-types/</guid><description>&lt;p>The data type choices we make when building data systems or metrics is critically important: as our systems run for long periods of time it can be easy to overflow the integers that we use (Y2K bug anyone?). As a result, I find myself constantly checking the sizes of standard int types but I haven&amp;rsquo;t found a good way to Google this. This blog post is a quick reference for the standard sizes and a discussion on why it matters.&lt;/p></description></item><item><title>Effective Programmers Read Code</title><link>https://rotational.io/blog/effective-programmers-read-code/</link><pubDate>Mon, 08 Aug 2022 08:10:14 -0400</pubDate><guid>https://rotational.io/blog/effective-programmers-read-code/</guid><description>&lt;p>As programmers, we tend think of ourselves as &lt;em>authors&lt;/em> of code, but our daily engineering practice probably requires us to spend more time reading code than writing it. Perhaps this is even a source of stress for you. Changing your mindset to think of yourself as an avid code &lt;em>reader&lt;/em> may not only alleviate this anxiety, but also make you a more effective programmer, capable of architecting complex mental maps of code, a technique I refer to as &amp;ldquo;building the glass castle&amp;rdquo;.&lt;/p></description></item><item><title>Marshaling Go Enums to and from JSON</title><link>https://rotational.io/blog/marshaling-go-enums-to-and-from-json/</link><pubDate>Thu, 26 May 2022 08:50:04 -0500</pubDate><guid>https://rotational.io/blog/marshaling-go-enums-to-and-from-json/</guid><description>&lt;p>Customizing JSON serialization for your data types seems relatively straightforward on the surface, but it&amp;rsquo;s easy to get turned around in receiver, value, pointer, and indirection confusion. Many of the patterns and rules-of-thumb you use in your normal Go code can lead you astray. In this post, we&amp;rsquo;ll illustrate exactly how and why to handle these edge cases.&lt;/p></description></item><item><title>Contexts in Go Microservice Chains</title><link>https://rotational.io/blog/contexts-in-go-microservice-chains/</link><pubDate>Sun, 02 May 2021 14:24:33 -0400</pubDate><guid>https://rotational.io/blog/contexts-in-go-microservice-chains/</guid><description>&lt;p>Contexts are a critical part of services implemented in Golang. Although we see them often in server interfaces, they can be mysterious to developers implementing request handlers. In this post, we&amp;rsquo;ll discuss what contexts are and take a look at a specific example where contexts shine: services that are implemented as a series of microservice requests. Then we&amp;rsquo;ll dive into the tl;dr of contexts — namely, the two crucial rules that all service handlers should implement. Finally, we&amp;rsquo;ll demonstrate a quick experiment using gRPC to show how context deadlines are propagated to downstream microservices during request processing, enabling effective coordination.&lt;/p></description></item><item><title>A Distributed Systems Maze</title><link>https://rotational.io/blog/a-distributed-systems-maze/</link><pubDate>Tue, 06 Apr 2021 13:49:57 -0400</pubDate><guid>https://rotational.io/blog/a-distributed-systems-maze/</guid><description>&lt;p>The most exciting applications coming out these days are the ones that aim big — aspiring to reach a global audience of users across regions, languages, timezones, and data centers. Not only are they in the exhilarating position of owning planet-scale markets, they&amp;rsquo;re poised to take on some of the most interesting data systems problems we&amp;rsquo;ve ever seen!&lt;/p></description></item><item><title>Project Planning With Block Based Dependencies</title><link>https://rotational.io/blog/project-planning-with-block-based-dependencies/</link><pubDate>Wed, 24 Mar 2021 07:49:48 -0400</pubDate><guid>https://rotational.io/blog/project-planning-with-block-based-dependencies/</guid><description>&lt;!-- frame the context -->
&lt;p>Good software development achieves complexity by describing the interactions of simple components. Of course, this is harder than it sounds, and if Mark Twain had been a software developer he would have likely said: &amp;ldquo;if I had more time, I would have created a simpler design.&amp;rdquo; This feels even more true at the start of a project when a roadmap has to be laid out and time and cost estimates applied.&lt;/p></description></item><item><title>Documenting a gRPC API with OpenAPI</title><link>https://rotational.io/blog/documenting-grpc-with-openapi/</link><pubDate>Fri, 12 Feb 2021 17:45:35 +0000</pubDate><guid>https://rotational.io/blog/documenting-grpc-with-openapi/</guid><description>&lt;p>gRPC makes the specification and implementation of networked APIs a snap. But what is the simplest way to &lt;em>document&lt;/em> a gRPC API? There seem to be some hosted providers by Google, e.g. &lt;a href="https://cloud.google.com/endpoints/docs/grpc/dev-portal-update-ref-docs">SmartDocs&lt;/a>, but I have yet to find a gRPC-specific tool. For REST API frameworks, documentation is commonly generated along with live examples using &lt;a href="https://swagger.io/resources/open-api/">OpenAPI (formerly swagger)&lt;/a>. By using &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway&lt;/a> it appears to be pretty straight forward to generate a REST/gRPC API combo from protocol buffers and then hook into the OpenAPI specification.&lt;/p></description></item><item><title>Hello World</title><link>https://rotational.io/blog/hello-world/</link><pubDate>Thu, 21 Jan 2021 16:20:18 -0400</pubDate><guid>https://rotational.io/blog/hello-world/</guid><description>&lt;p>Right now only half the world is awake. For successful planetary-scale networking, it&amp;rsquo;s time for diurnal intelligently distributed systems.&lt;/p></description></item></channel></rss>