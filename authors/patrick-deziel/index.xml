<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Patrick Deziel on Rotational Labs</title><link>https://rotational.io/authors/patrick-deziel/</link><description>Recent content in Patrick Deziel on Rotational Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 08 Nov 2023 09:30:29 -0600</lastBuildDate><atom:link href="https://rotational.io/authors/patrick-deziel/index.xml" rel="self" type="application/rss+xml"/><item><title>PubSub 101 - Creating Your Project</title><link>https://rotational.io/blog/pubsub-101---creating-your-project/</link><pubDate>Wed, 08 Nov 2023 09:30:29 -0600</pubDate><guid>https://rotational.io/blog/pubsub-101---creating-your-project/</guid><description>&lt;p>Welcome to PubSub 101! In this module you will create a new Ensign account and a new project. After completing this module, you will have an API key that you can use to publish data to Ensign!&lt;/p></description></item><item><title>Reinforcement Learning, Automation... and Tetris</title><link>https://rotational.io/blog/reinforcement-learning-automation-and-tetris/</link><pubDate>Thu, 02 Nov 2023 11:46:04 -0400</pubDate><guid>https://rotational.io/blog/reinforcement-learning-automation-and-tetris/</guid><description>&lt;p>Every time I&amp;rsquo;m writing complex rules in my code, I remember there&amp;rsquo;s a machine learning technique for this: Reinforcement Learning. RL models are able to learn the optimal rules given predefined rewards. Read on to learn how!&lt;/p></description></item><item><title>Spooky `asyncio` Errors and How to Fix Them</title><link>https://rotational.io/blog/spooky-asyncio-errors-and-how-to-fix-them/</link><pubDate>Fri, 13 Oct 2023 10:44:23 -0500</pubDate><guid>https://rotational.io/blog/spooky-asyncio-errors-and-how-to-fix-them/</guid><description>&lt;p>You&amp;rsquo;ve heard the &lt;code>asyncio&lt;/code> library unlocks concurrency for Python with minimal syntactical overhead, but the terminology makes you tremble! Don&amp;rsquo;t panic â€” here are 3 of the most common errors you will encounter and how to fix them.&lt;/p></description></item><item><title>Async or Swim: A Developer's Guide to Wading into Asynchronous Processing</title><link>https://rotational.io/blog/async-or-swim/</link><pubDate>Mon, 05 Jun 2023 10:39:51 -0500</pubDate><guid>https://rotational.io/blog/async-or-swim/</guid><description>&lt;p>The Go programming language provides powerful tools for managing concurrency, but robust asynchronous code requires us as developers to design around uncertain tasks and manifold queues. Step through an async codebase with us in this post!&lt;/p></description></item><item><title>Transparently Mocking gRPC Services</title><link>https://rotational.io/blog/transparently-mocking-grpc-services/</link><pubDate>Fri, 08 Jul 2022 09:32:01 -0400</pubDate><guid>https://rotational.io/blog/transparently-mocking-grpc-services/</guid><description>&lt;p>gRPC is an effective way of implementing service-to-service APIs. However, there are limited tools available for mocking and testing gRPC services out of the box. One option is to set up a live test server, although this comes with its own challenges and costs. In this blog post we will demonstrate a more lightweight solution using the &lt;code>bufconn&lt;/code> package and a hand-built mock. Don&amp;rsquo;t worry, this is easier than it seems!&lt;/p></description></item><item><title>Achieving Total Ordering With CRDTs</title><link>https://rotational.io/blog/achieving-total-ordering-with-crdts/</link><pubDate>Wed, 04 May 2022 15:02:21 -0600</pubDate><guid>https://rotational.io/blog/achieving-total-ordering-with-crdts/</guid><description>&lt;p>Conflict-free replicated data types (or &amp;ldquo;CRDTs&amp;rdquo;) are inspiring the creation of more collaborative applications and improving the experience of users of distributed systems. In this post, we will explore how these data structures can be used to achieve a consistent, total ordering of events across many peers.&lt;/p></description></item><item><title>Fake It When You Make It: Creating Mocks in Go</title><link>https://rotational.io/blog/fake-it-when-you-make-it/</link><pubDate>Mon, 06 Dec 2021 10:39:45 -0600</pubDate><guid>https://rotational.io/blog/fake-it-when-you-make-it/</guid><description>&lt;p>In the age of microservices and containerized applications, software is less monolithic and more interdependent. How do we write tests which account for this new reality? One common strategy is to create mocks for services. In this post, we&amp;rsquo;ll explore some of the challenges with testing in Go and dive into some concrete examples where creating mocks can help alleviate these problems.&lt;/p></description></item></channel></rss>